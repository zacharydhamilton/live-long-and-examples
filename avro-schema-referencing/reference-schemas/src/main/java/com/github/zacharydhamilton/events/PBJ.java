/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.github.zacharydhamilton.events;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class PBJ extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 8404707215493115706L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"PBJ\",\"namespace\":\"com.github.zacharydhamilton.events\",\"fields\":[{\"name\":\"bread\",\"type\":\"string\",\"doc\":\"Type of bread.\"},{\"name\":\"peanutbutter\",\"type\":{\"type\":\"record\",\"name\":\"PeanutButter\",\"fields\":[{\"name\":\"smooth\",\"type\":\"boolean\",\"doc\":\"Is this smooth or not. Not implies chunky\"},{\"name\":\"organic\",\"type\":\"boolean\",\"doc\":\"Is this organic or not.\"}],\"version\":\"1\"},\"doc\":\"The specific PeanutButter.\"},{\"name\":\"jelly\",\"type\":{\"type\":\"record\",\"name\":\"Jelly\",\"fields\":[{\"name\":\"flavor\",\"type\":\"string\",\"doc\":\"The flavor of this Jelly (i.e. grape, strawberry, raspberry).\"},{\"name\":\"organic\",\"type\":\"boolean\",\"doc\":\"Is this organic or not.\"}],\"version\":\"1\"},\"doc\":\"The specific Jelly.\"}],\"version\":\"1\"}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<PBJ> ENCODER =
      new BinaryMessageEncoder<PBJ>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<PBJ> DECODER =
      new BinaryMessageDecoder<PBJ>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<PBJ> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<PBJ> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<PBJ> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<PBJ>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this PBJ to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a PBJ from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a PBJ instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static PBJ fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  /** Type of bread. */
  private java.lang.CharSequence bread;
  /** The specific PeanutButter. */
  private com.github.zacharydhamilton.events.PeanutButter peanutbutter;
  /** The specific Jelly. */
  private com.github.zacharydhamilton.events.Jelly jelly;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public PBJ() {}

  /**
   * All-args constructor.
   * @param bread Type of bread.
   * @param peanutbutter The specific PeanutButter.
   * @param jelly The specific Jelly.
   */
  public PBJ(java.lang.CharSequence bread, com.github.zacharydhamilton.events.PeanutButter peanutbutter, com.github.zacharydhamilton.events.Jelly jelly) {
    this.bread = bread;
    this.peanutbutter = peanutbutter;
    this.jelly = jelly;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bread;
    case 1: return peanutbutter;
    case 2: return jelly;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bread = (java.lang.CharSequence)value$; break;
    case 1: peanutbutter = (com.github.zacharydhamilton.events.PeanutButter)value$; break;
    case 2: jelly = (com.github.zacharydhamilton.events.Jelly)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bread' field.
   * @return Type of bread.
   */
  public java.lang.CharSequence getBread() {
    return bread;
  }


  /**
   * Sets the value of the 'bread' field.
   * Type of bread.
   * @param value the value to set.
   */
  public void setBread(java.lang.CharSequence value) {
    this.bread = value;
  }

  /**
   * Gets the value of the 'peanutbutter' field.
   * @return The specific PeanutButter.
   */
  public com.github.zacharydhamilton.events.PeanutButter getPeanutbutter() {
    return peanutbutter;
  }


  /**
   * Sets the value of the 'peanutbutter' field.
   * The specific PeanutButter.
   * @param value the value to set.
   */
  public void setPeanutbutter(com.github.zacharydhamilton.events.PeanutButter value) {
    this.peanutbutter = value;
  }

  /**
   * Gets the value of the 'jelly' field.
   * @return The specific Jelly.
   */
  public com.github.zacharydhamilton.events.Jelly getJelly() {
    return jelly;
  }


  /**
   * Sets the value of the 'jelly' field.
   * The specific Jelly.
   * @param value the value to set.
   */
  public void setJelly(com.github.zacharydhamilton.events.Jelly value) {
    this.jelly = value;
  }

  /**
   * Creates a new PBJ RecordBuilder.
   * @return A new PBJ RecordBuilder
   */
  public static com.github.zacharydhamilton.events.PBJ.Builder newBuilder() {
    return new com.github.zacharydhamilton.events.PBJ.Builder();
  }

  /**
   * Creates a new PBJ RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new PBJ RecordBuilder
   */
  public static com.github.zacharydhamilton.events.PBJ.Builder newBuilder(com.github.zacharydhamilton.events.PBJ.Builder other) {
    if (other == null) {
      return new com.github.zacharydhamilton.events.PBJ.Builder();
    } else {
      return new com.github.zacharydhamilton.events.PBJ.Builder(other);
    }
  }

  /**
   * Creates a new PBJ RecordBuilder by copying an existing PBJ instance.
   * @param other The existing instance to copy.
   * @return A new PBJ RecordBuilder
   */
  public static com.github.zacharydhamilton.events.PBJ.Builder newBuilder(com.github.zacharydhamilton.events.PBJ other) {
    if (other == null) {
      return new com.github.zacharydhamilton.events.PBJ.Builder();
    } else {
      return new com.github.zacharydhamilton.events.PBJ.Builder(other);
    }
  }

  /**
   * RecordBuilder for PBJ instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<PBJ>
    implements org.apache.avro.data.RecordBuilder<PBJ> {

    /** Type of bread. */
    private java.lang.CharSequence bread;
    /** The specific PeanutButter. */
    private com.github.zacharydhamilton.events.PeanutButter peanutbutter;
    private com.github.zacharydhamilton.events.PeanutButter.Builder peanutbutterBuilder;
    /** The specific Jelly. */
    private com.github.zacharydhamilton.events.Jelly jelly;
    private com.github.zacharydhamilton.events.Jelly.Builder jellyBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.github.zacharydhamilton.events.PBJ.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bread)) {
        this.bread = data().deepCopy(fields()[0].schema(), other.bread);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.peanutbutter)) {
        this.peanutbutter = data().deepCopy(fields()[1].schema(), other.peanutbutter);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (other.hasPeanutbutterBuilder()) {
        this.peanutbutterBuilder = com.github.zacharydhamilton.events.PeanutButter.newBuilder(other.getPeanutbutterBuilder());
      }
      if (isValidValue(fields()[2], other.jelly)) {
        this.jelly = data().deepCopy(fields()[2].schema(), other.jelly);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasJellyBuilder()) {
        this.jellyBuilder = com.github.zacharydhamilton.events.Jelly.newBuilder(other.getJellyBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing PBJ instance
     * @param other The existing instance to copy.
     */
    private Builder(com.github.zacharydhamilton.events.PBJ other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.bread)) {
        this.bread = data().deepCopy(fields()[0].schema(), other.bread);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.peanutbutter)) {
        this.peanutbutter = data().deepCopy(fields()[1].schema(), other.peanutbutter);
        fieldSetFlags()[1] = true;
      }
      this.peanutbutterBuilder = null;
      if (isValidValue(fields()[2], other.jelly)) {
        this.jelly = data().deepCopy(fields()[2].schema(), other.jelly);
        fieldSetFlags()[2] = true;
      }
      this.jellyBuilder = null;
    }

    /**
      * Gets the value of the 'bread' field.
      * Type of bread.
      * @return The value.
      */
    public java.lang.CharSequence getBread() {
      return bread;
    }


    /**
      * Sets the value of the 'bread' field.
      * Type of bread.
      * @param value The value of 'bread'.
      * @return This builder.
      */
    public com.github.zacharydhamilton.events.PBJ.Builder setBread(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.bread = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bread' field has been set.
      * Type of bread.
      * @return True if the 'bread' field has been set, false otherwise.
      */
    public boolean hasBread() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bread' field.
      * Type of bread.
      * @return This builder.
      */
    public com.github.zacharydhamilton.events.PBJ.Builder clearBread() {
      bread = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'peanutbutter' field.
      * The specific PeanutButter.
      * @return The value.
      */
    public com.github.zacharydhamilton.events.PeanutButter getPeanutbutter() {
      return peanutbutter;
    }


    /**
      * Sets the value of the 'peanutbutter' field.
      * The specific PeanutButter.
      * @param value The value of 'peanutbutter'.
      * @return This builder.
      */
    public com.github.zacharydhamilton.events.PBJ.Builder setPeanutbutter(com.github.zacharydhamilton.events.PeanutButter value) {
      validate(fields()[1], value);
      this.peanutbutterBuilder = null;
      this.peanutbutter = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'peanutbutter' field has been set.
      * The specific PeanutButter.
      * @return True if the 'peanutbutter' field has been set, false otherwise.
      */
    public boolean hasPeanutbutter() {
      return fieldSetFlags()[1];
    }

    /**
     * Gets the Builder instance for the 'peanutbutter' field and creates one if it doesn't exist yet.
     * The specific PeanutButter.
     * @return This builder.
     */
    public com.github.zacharydhamilton.events.PeanutButter.Builder getPeanutbutterBuilder() {
      if (peanutbutterBuilder == null) {
        if (hasPeanutbutter()) {
          setPeanutbutterBuilder(com.github.zacharydhamilton.events.PeanutButter.newBuilder(peanutbutter));
        } else {
          setPeanutbutterBuilder(com.github.zacharydhamilton.events.PeanutButter.newBuilder());
        }
      }
      return peanutbutterBuilder;
    }

    /**
     * Sets the Builder instance for the 'peanutbutter' field
     * The specific PeanutButter.
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.github.zacharydhamilton.events.PBJ.Builder setPeanutbutterBuilder(com.github.zacharydhamilton.events.PeanutButter.Builder value) {
      clearPeanutbutter();
      peanutbutterBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'peanutbutter' field has an active Builder instance
     * The specific PeanutButter.
     * @return True if the 'peanutbutter' field has an active Builder instance
     */
    public boolean hasPeanutbutterBuilder() {
      return peanutbutterBuilder != null;
    }

    /**
      * Clears the value of the 'peanutbutter' field.
      * The specific PeanutButter.
      * @return This builder.
      */
    public com.github.zacharydhamilton.events.PBJ.Builder clearPeanutbutter() {
      peanutbutter = null;
      peanutbutterBuilder = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'jelly' field.
      * The specific Jelly.
      * @return The value.
      */
    public com.github.zacharydhamilton.events.Jelly getJelly() {
      return jelly;
    }


    /**
      * Sets the value of the 'jelly' field.
      * The specific Jelly.
      * @param value The value of 'jelly'.
      * @return This builder.
      */
    public com.github.zacharydhamilton.events.PBJ.Builder setJelly(com.github.zacharydhamilton.events.Jelly value) {
      validate(fields()[2], value);
      this.jellyBuilder = null;
      this.jelly = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'jelly' field has been set.
      * The specific Jelly.
      * @return True if the 'jelly' field has been set, false otherwise.
      */
    public boolean hasJelly() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'jelly' field and creates one if it doesn't exist yet.
     * The specific Jelly.
     * @return This builder.
     */
    public com.github.zacharydhamilton.events.Jelly.Builder getJellyBuilder() {
      if (jellyBuilder == null) {
        if (hasJelly()) {
          setJellyBuilder(com.github.zacharydhamilton.events.Jelly.newBuilder(jelly));
        } else {
          setJellyBuilder(com.github.zacharydhamilton.events.Jelly.newBuilder());
        }
      }
      return jellyBuilder;
    }

    /**
     * Sets the Builder instance for the 'jelly' field
     * The specific Jelly.
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public com.github.zacharydhamilton.events.PBJ.Builder setJellyBuilder(com.github.zacharydhamilton.events.Jelly.Builder value) {
      clearJelly();
      jellyBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'jelly' field has an active Builder instance
     * The specific Jelly.
     * @return True if the 'jelly' field has an active Builder instance
     */
    public boolean hasJellyBuilder() {
      return jellyBuilder != null;
    }

    /**
      * Clears the value of the 'jelly' field.
      * The specific Jelly.
      * @return This builder.
      */
    public com.github.zacharydhamilton.events.PBJ.Builder clearJelly() {
      jelly = null;
      jellyBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public PBJ build() {
      try {
        PBJ record = new PBJ();
        record.bread = fieldSetFlags()[0] ? this.bread : (java.lang.CharSequence) defaultValue(fields()[0]);
        if (peanutbutterBuilder != null) {
          try {
            record.peanutbutter = this.peanutbutterBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("peanutbutter"));
            throw e;
          }
        } else {
          record.peanutbutter = fieldSetFlags()[1] ? this.peanutbutter : (com.github.zacharydhamilton.events.PeanutButter) defaultValue(fields()[1]);
        }
        if (jellyBuilder != null) {
          try {
            record.jelly = this.jellyBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("jelly"));
            throw e;
          }
        } else {
          record.jelly = fieldSetFlags()[2] ? this.jelly : (com.github.zacharydhamilton.events.Jelly) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<PBJ>
    WRITER$ = (org.apache.avro.io.DatumWriter<PBJ>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<PBJ>
    READER$ = (org.apache.avro.io.DatumReader<PBJ>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.bread);

    this.peanutbutter.customEncode(out);

    this.jelly.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.bread = in.readString(this.bread instanceof Utf8 ? (Utf8)this.bread : null);

      if (this.peanutbutter == null) {
        this.peanutbutter = new com.github.zacharydhamilton.events.PeanutButter();
      }
      this.peanutbutter.customDecode(in);

      if (this.jelly == null) {
        this.jelly = new com.github.zacharydhamilton.events.Jelly();
      }
      this.jelly.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.bread = in.readString(this.bread instanceof Utf8 ? (Utf8)this.bread : null);
          break;

        case 1:
          if (this.peanutbutter == null) {
            this.peanutbutter = new com.github.zacharydhamilton.events.PeanutButter();
          }
          this.peanutbutter.customDecode(in);
          break;

        case 2:
          if (this.jelly == null) {
            this.jelly = new com.github.zacharydhamilton.events.Jelly();
          }
          this.jelly.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










